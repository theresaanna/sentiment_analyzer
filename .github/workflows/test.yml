name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Service containers to run with the job
    services:
      # Redis service for testing
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask
    
    - name: Create .env file for testing
      run: |
        echo "FLASK_APP=run.py" >> .env
        echo "FLASK_ENV=testing" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DATABASE_URL=sqlite:///test.db" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
        echo "STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}" >> .env
        echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
        echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env
        echo "PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }}" >> .env
        echo "PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }}" >> .env
        echo "MAIL_SERVER=localhost" >> .env
        echo "MAIL_PORT=1025" >> .env
        echo "MAIL_USE_TLS=false" >> .env
        echo "MAIL_USE_SSL=false" >> .env
        echo "OAUTHLIB_INSECURE_TRANSPORT=1" >> .env
    
    - name: Run tests with pytest
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
      env:
        PYTHONPATH: ${{ github.workspace }}
        CI: true
    
    - name: Upload coverage reports to Codecov (optional)
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30

  # Status check that Railway can wait for
  test-status:
    name: Test Status Check
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All tests passed!"
            exit 0
          else
            echo "❌ Tests failed!"
            exit 1
          fi