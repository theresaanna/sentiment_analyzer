# Nixpacks configuration for Railway deployment with integrated testing
# This configuration runs tests during the build phase

[phases.setup]
# Include Python, Node.js, and build tools
nixPkgs = [
  "python311",
  "nodejs_20",
  "gcc",
  "postgresql",
  "redis",
  "python311Packages.pip",
  "python311Packages.setuptools",
  "python311Packages.wheel",
  "python311Packages.virtualenv"
]

[phases.install]
# Create and use a dedicated venv; install both Python and Node dependencies
cmds = [
    "python3 -V",
    "node --version",
    "npm --version",
    "which pip || true; pip --version || true",
    "virtualenv --version",
    "virtualenv -p python3 /opt/venv",
    "/opt/venv/bin/python -V",
    "/opt/venv/bin/pip --version",
    "/opt/venv/bin/pip install --upgrade pip setuptools wheel",
    "/opt/venv/bin/pip install -r requirements.txt",
    "echo 'ðŸ“¦ Python dependencies installed successfully'",
    "echo 'ðŸ“¦ Installing frontend dependencies...'",
    "cd frontend && rm -rf node_modules package-lock.json && npm install && cd ..",
    "echo 'ðŸ“¦ Frontend dependencies installed successfully'"
]

[phases.test]
dependsOn = ["install"]
cmds = [
    # Run tests with the venv Python so dependencies resolve correctly
    "/opt/venv/bin/python scripts/run_tests_railway.py"
]

[phases.build]
dependsOn = ["test"]
cmds = [
    # Build frontend
    "echo 'ðŸ”¨ Building frontend...'",
    "cd frontend && npm run build && cd ..",
    "echo 'âœ… Frontend built successfully!'",
    # No model downloads needed - using Modal ML service
    "echo 'ðŸš€ Using Modal ML service for sentiment analysis'",
    "echo 'âœ… Build complete!'"
]

# Start command is defined in Procfile

[start]
# Explicitly use venv Python for runtime
cmd = "/opt/venv/bin/python railway_start.py"

[variables]
RAILWAY_RUN_TESTS = "true"
PYTEST_OPTIONS = "-v --tb=short"
